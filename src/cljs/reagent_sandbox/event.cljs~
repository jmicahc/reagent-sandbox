(ns reagent-sandbox.event
  (:require [reagent.core :as reagent]
            [reagent-sandbox.graph :as graph :refer [rx]]
            [reagent-sandbox.element :refer [attr]]
            [reagent-sandbox.data :as data
             :refer [mutate-chan debounced-mutate]]
            [cljs.core.async :refer [put!]]))


(declare msg-contains?)

(defn event [elem]
  (merge-with comp
              (on :onClick
                  (fn [msg] (assoc msg :name :hello)))))


(defn source
  [{:keys [source/event-name
           source/new-name]}]
  (on event-name
      (fn [msg]
        (assoc msg :name new-name))))




;; We need a name for functions
;; that correspond to properties
;; of the node and not a function
;; of the node's attributes. Nodes
;; either have this property or
;; they do not. Maybe we should call
;; these tags. for now, we call functions
;; of the  node's state methods.



(def prev
  (on boolean
      (let [prev-node (atom [])]
        (fn [msg]
          (let [x @prev-node]
            (reset! prev-node (:node msg))
            (assoc msg :prev x))))))



(def x-pos
  (on boolean
      (fn [{:keys [payload] :as msg}]
        (if-let [x (.-mouseX payload)]
          (assoc msg :x x)
          msg))))



(def y-pos
  (on boolean
      (fn [{:keys [payload] :as msg}]
        (if-let [y (.-mouseY payload)]
            (assoc msg :y y)
            msg))))




(def delta-x
  (merge-with comp
              prev
              x-pos
              (msg-contains? [:x-pos :prev]
                             (fn [{:keys [x prev] :as msg}]
                               (assoc msg :dx (- x (:x prev)))))))




(def delta-y
  (merge-with comp
              prev
              y-pos
              (msg-contains? [:y-pos :prev]
                             (fn [{:keys [y prev] :as msg}]
                               (assoc msg :dy (- y (:y prev)))))))

